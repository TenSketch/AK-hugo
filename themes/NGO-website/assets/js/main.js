console.log('This site was generated by Hugo.');

// Close navbar when clicking outside
document.addEventListener('click', (event) => {
  const navbar = document.querySelector('.navbar');
  const navbarToggler = document.querySelector('.navbar-toggler');
  const navbarCollapse = document.querySelector('#navbarContent');

  // Check if the click is outside the navbar
  if (navbar && !navbar.contains(event.target)) {
    // Ensure the navbar toggler icon closes
    if (navbarToggler.classList.contains('collapsed') === false) {
      navbarToggler.classList.add('collapsed');
    }

    // Hide the navbar collapse if it is shown
    const bsCollapse = bootstrap.Collapse.getInstance(navbarCollapse);
    if (bsCollapse && navbarCollapse.classList.contains('show')) {
      bsCollapse.hide();
    }
  }
});


// Close other dropdowns when a new one is opened
document.querySelectorAll('.dropdown-toggle').forEach(dropdownToggle => {
  dropdownToggle.addEventListener('click', function () {
    const openDropdowns = document.querySelectorAll('.dropdown.show');
    openDropdowns.forEach(dropdown => {
      if (dropdown !== this.parentElement) {
        dropdown.classList.remove('show');
        const menu = dropdown.querySelector('.dropdown-menu');
        menu.classList.remove('show');
      }
    });
  });
});

// gallery
// Initialize Fancybox
Fancybox.bind("[data-fancybox='gallery']", {
  // Optional Fancybox options
  Thumbs: {
    autoStart: true,
  },
});

// Fallback LazyLoad (if not relying solely on native lazy loading)
document.addEventListener("DOMContentLoaded", function () {
  var lazyImages = [].slice.call(document.querySelectorAll("img[loading='lazy']"));
  if ("IntersectionObserver" in window) {
    let lazyImageObserver = new IntersectionObserver(function (entries, observer) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          let lazyImage = entry.target;
          // If using data-src instead of src attribute, swap here:
          // lazyImage.src = lazyImage.dataset.src;
          lazyImageObserver.unobserve(lazyImage);
        }
      });
    });
    lazyImages.forEach(function (lazyImage) {
      lazyImageObserver.observe(lazyImage);
    });
  }
});

// youtube video embed

  const videoLightbox = document.getElementById("video-lightbox");
  const videoIframe = document.getElementById("video-iframe");

  // Open Video Lightbox function
  function openLightbox(url) {
    videoIframe.src = url;
    videoLightbox.classList.remove("hidden");
  }

  // Close Video Lightbox function
  function closeLightbox() {
    videoIframe.src = "";
    videoLightbox.classList.add("hidden");
  }

  document.addEventListener("DOMContentLoaded", function () {
    // Attach event listener to video cards
    const videoCards = document.querySelectorAll(".video-card");
    videoCards.forEach(card => {
      card.addEventListener("click", function() {
        const url = card.getAttribute("data-url");
        openLightbox(url);
      });
    });

    // Attach event listener to the close button
    const closeButton = document.querySelector(".close-btn");
    if (closeButton) {
      closeButton.addEventListener("click", closeLightbox);
    }
  });
